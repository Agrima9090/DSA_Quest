/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void path(TreeNode* root,  vector<string>&ans,string store)
{
    if(!root)return;
    store+=to_string(root->val);
    if(!root->left && !root->right)
    {
        ans.push_back(store);
    }
    else
    {
        store+="->";
    }
    path(root->left,ans,store);
    path(root->right,ans,store);

}
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string>ans;
        path(root,ans,"");
        return ans;
    }
};


T.C= O(n)
S.C= O(h)
